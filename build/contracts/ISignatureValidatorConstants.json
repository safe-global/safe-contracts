{"contractName":"ISignatureValidatorConstants","abi":[],"bytecode":"0x6080604052348015600f57600080fd5b50603e80601d6000396000f3fe6080604052600080fdfea265627a7a72315820ed7d5912d321c6a6fedb4a34e8751f654a38ef7914e17509ac6e464b162d5c1564736f6c634300050e0032","deployedBytecode":"0x6080604052600080fdfea265627a7a72315820ed7d5912d321c6a6fedb4a34e8751f654a38ef7914e17509ac6e464b162d5c1564736f6c634300050e0032","sourceMap":"33:161:18:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;33:161:18;;;;;;;","deployedSourceMap":"33:161:18:-;;;;;","source":"pragma solidity >=0.5.0 <0.7.0;\n\ncontract ISignatureValidatorConstants {\n    // bytes4(keccak256(\"isValidSignature(bytes,bytes)\")\n    bytes4 constant internal EIP1271_MAGIC_VALUE = 0x20c13b0b;\n}\n\ncontract ISignatureValidator is ISignatureValidatorConstants {\n\n    /**\n    * @dev Should return whether the signature provided is valid for the provided data\n    * @param _data Arbitrary length data signed on the behalf of address(this)\n    * @param _signature Signature byte array associated with _data\n    *\n    * MUST return the bytes4 magic value 0x20c13b0b when function passes.\n    * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\n    * MUST allow external calls\n    */\n    function isValidSignature(\n        bytes memory _data,\n        bytes memory _signature)\n        public\n        view\n        returns (bytes4);\n}","compiler":{"name":"solc","version":"0.5.14+commit.01f1aaa4.Emscripten.clang"},"networks":{},"schemaVersion":"2.0.3","updatedAt":"2020-07-02T10:34:22.689Z"}